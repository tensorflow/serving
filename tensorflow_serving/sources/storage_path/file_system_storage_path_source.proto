syntax = "proto3";

package tensorflow.serving;

// Config proto for FileSystemStoragePathSource.
message FileSystemStoragePathSourceConfig {

  // The policy to define how many versions of the servable should be
  // served at the same time.
  enum VersionPolicy {
    // Only serve the latest version that exists in the base path.
    // This is the default behavior.
    LATEST_VERSION = 0;
    // Serves all the versions that exist in the base path.
    ALL_VERSIONS = 1;
  }

  // A servable name and base path to look for versions of the servable.
  message ServableToMonitor {
    // The servable name to supply in aspired-versions callback calls. Child
    // paths of 'base_path' are considered to be versions of this servable.
    string servable_name = 1;

    // The path to monitor, i.e. look for child paths of the form base_path/123.
    string base_path = 2;

    // The policy to determines the number of versions of the servable to be
    // served at the same time.
    VersionPolicy version_policy = 3;
  };

  // The servables to monitor for new versions, and aspire.
  repeated ServableToMonitor servables = 5;

  // A single servable name/base_path pair to monitor.
  // DEPRECATED: Use 'servables' instead.
  // TODO(b/30898016): Stop using these fields, and ultimately remove them here.
  string servable_name = 1 [deprecated = true];
  string base_path = 2 [deprecated = true];

  // How long to wait between file-system polling to look for children of
  // 'base_path', in seconds.
  //
  // For testing use only: a negative value disables the polling thread.
  int64 file_system_poll_wait_seconds = 3;

  // If true, then FileSystemStoragePathSource::Create() and ::UpdateConfig()
  // fail if, for any configured servables, the file system doesn't currently
  // contain at least one version under the base path.
  // (Otherwise, it will emit a warning and keep pinging the file system to
  // check for a version to appear later.)
  bool fail_if_zero_versions_at_startup = 4;
}
