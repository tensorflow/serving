diff --git a/tensorflow_text/core/kernels/fast_wordpiece_tokenizer.cc b/tensorflow_text/core/kernels/fast_wordpiece_tokenizer.cc
index c1f0e4e..a92ecd8 100644
--- a/tensorflow_text/core/kernels/fast_wordpiece_tokenizer.cc
+++ b/tensorflow_text/core/kernels/fast_wordpiece_tokenizer.cc
@@ -32,7 +32,7 @@ namespace {
 template <bool kGetPieces>
 int GetCurrentOutputSize(std::vector<std::string>* output_pieces,
                          std::vector<int>* output_ids) {
-  if constexpr (kGetPieces) {
+  if (kGetPieces) {
     return output_pieces->size();
   } else {
     return output_ids->size();
@@ -538,10 +538,10 @@ void FastWordpieceTokenizer::AppendTokenToOutput(
     std::vector<int>* output_end_offsets) const {
   auto token_id =
       fast_wordpiece_tokenizer_utils::GetTokenId(encoded_token_value);
-  if constexpr (kGetIds) {
+  if (kGetIds) {
     output_ids->push_back(token_id);
   }
-  if constexpr (kGetPieces || kGetOffsets) {
+  if (kGetPieces || kGetOffsets) {
     // For suffix tokens, the length below is without the suffix indicator.
     int token_substr_length =
         fast_wordpiece_tokenizer_utils::GetTokenLength(encoded_token_value);
@@ -553,7 +553,7 @@ void FastWordpieceTokenizer::AppendTokenToOutput(
       // to adjust and add the length of the suffix indicator string.
       token_substr_length += config_->suffix_indicator()->size();
     }
-    if constexpr (kGetPieces) {
+    if (kGetPieces) {
       // If token id is unk_token_id, it means that it is a dummy node for
       // punctuations that are not contained in the vocabulary, we append
       // the unk_token in this case. Otherwise, we
@@ -569,7 +569,7 @@ void FastWordpieceTokenizer::AppendTokenToOutput(
               ? absl::StrCat(config_->suffix_indicator()->str(), subword_str)
               : subword_str);
     }
-    if constexpr (kGetOffsets) {
+    if (kGetOffsets) {
       // Record the offsets relative to the start of the whole text.
       output_start_offsets->push_back(input_word_offset_in_text +
                                       cur_offset_in_input_word);
@@ -646,15 +646,15 @@ void FastWordpieceTokenizer::ResetOutputAppendUnknownToken(
     std::vector<std::string>* output_pieces, std::vector<int>* output_ids,
     std::vector<int>* output_start_offsets,
     std::vector<int>* output_end_offsets) const {
-  if constexpr (kGetPieces) {
+  if (kGetPieces) {
     output_pieces->resize(original_num_tokens + 1);
     output_pieces->back() = config_->unk_token()->str();
   }
-  if constexpr (kGetIds) {
+  if (kGetIds) {
     output_ids->resize(original_num_tokens + 1);
     output_ids->back() = config_->unk_token_id();
   }
-  if constexpr (kGetOffsets) {
+  if (kGetOffsets) {
     output_start_offsets->resize(original_num_tokens + 1);
     output_start_offsets->back() = input_word_offset_in_text;
 
diff --git a/tensorflow_text/tftext.bzl b/tensorflow_text/tftext.bzl
index fb87905..ad72a05 100644
--- a/tensorflow_text/tftext.bzl
+++ b/tensorflow_text/tftext.bzl
@@ -123,8 +123,8 @@ def tf_cc_library(
             "@org_tensorflow//tensorflow/core:portable_tensorflow_lib_lite",
         ],
         "//conditions:default": [
-            "@local_config_tf//:libtensorflow_framework",
-            "@local_config_tf//:tf_header_lib",
+            "@org_tensorflow//tensorflow/core:tensorflow_opensource",
+            "@org_tensorflow//tensorflow/lite/kernels/shim:status_macros", "@org_tensorflow//tensorflow/lite/kernels/shim:tf_op_shim", "@org_tensorflow//tensorflow/lite/kernels/shim:op_kernel", "@org_tensorflow//tensorflow/lite/kernels/shim:tensor_view", "@org_tensorflow//tensorflow/lite/kernels/shim:shape",
         ] + tf_deps + oss_deps,
     })
     native.cc_library(
@@ -192,8 +192,8 @@ def tflite_cc_library(
             "@org_tensorflow//tensorflow/core:portable_tensorflow_lib_lite",
         ],
         "//conditions:default": [
-            "@local_config_tf//:libtensorflow_framework",
-            "@local_config_tf//:tf_header_lib",
+            "@org_tensorflow//tensorflow/core:tensorflow_opensource",
+            "@org_tensorflow//tensorflow/lite/kernels/shim:status_macros", "@org_tensorflow//tensorflow/lite/kernels/shim:tf_op_shim", "@org_tensorflow//tensorflow/lite/kernels/shim:op_kernel", "@org_tensorflow//tensorflow/lite/kernels/shim:tensor_view", "@org_tensorflow//tensorflow/lite/kernels/shim:shape",
         ] + oss_deps,
     })
     native.cc_library(
